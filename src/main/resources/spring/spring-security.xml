<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.wlt.*" />
    <!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置-->
    <debug />
    <!-- 该路径下的资源不用过滤 -->
    <http pattern="/include/js/**" security="none" />
    <http pattern="/include/css/**" security="none" />
    <http pattern="/include/scripts/**" security="none" />
    <http pattern="/include/jsp/**" security="none" />
    <http pattern="/images/**" security="none" />
    <http pattern="/login.jsp" security="none" />
    <!--设置那些资源可以访问，那些需要权限才能访问-->
    <!--auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session).-->
    <!-- lowercase-comparisons：表示URL比较前先转为小写。-->
    <!-- path-type：表示使用Apache Ant的匹配模式。-->
    <!--access-denied-page：访问拒绝时转向的页面。-->
    <!-- access-decision-manager-ref：指定了自定义的访问策略管理器。-->
    <http auto-config="false" entry-point-ref="myAuthenticationEntryPoint">
        <intercept-url pattern="/api/login" access="permitAll" />
        <intercept-url pattern="/api/access_Denied" access="permitAll" />
        <intercept-url pattern="/api/password_Denied" access="permitAll" />
        <intercept-url pattern="/api/index" access="hasRole('ROLE_USER')" />
        <intercept-url pattern="/WEB-INF/**" access="hasRole('ROLE_USER')" />
        <!--把相应的目录的资源设置权限-->
        <intercept-url pattern="/WEB-INF/views/**" access="isAuthenticated()" />
        <intercept-url pattern="/**" access="isAuthenticated()" />
        <!-- 实现免登陆验证 -->
        <remember-me />
        <!-- 将自定义的实现了权限控制逻辑的过滤器加入到spring-security的过滤器链中 -->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
        <!-- 认证 --><!-- 重写登陆认证的过滤器，使我们可以拿到任何参数  -->
        <custom-filter ref="myAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <csrf disabled="true"/>
    </http>
    <!--身份验证-->
    <!-- 将实现了用户信息获取的bean注入到authenticationManager中 -->
    <authentication-manager alias="MyAuthenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
        </authentication-provider>
    </authentication-manager>
    <!-- 未登录的切入点 --><!-- 需要有个切入点 -->
    <beans:bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:constructor-arg value="/api/login"/>
    </beans:bean>
    <!-- 登录验证器：用户有没有登录的资格 --><!-- 这个就是重写的认证过滤器 -->
    <beans:bean id="myAuthenticationFilter" class="com.wlt.security.MyAuthenticationFilter">
        <beans:property name="authenticationManager" ref="MyAuthenticationManager" />
        <beans:property name="filterProcessesUrl" value="/j_spring_security_check" />
        <beans:property name="usernameParameter" value="username"/>
        <beans:property name="passwordParameter" value="password"/>
        <beans:property name="authenticationSuccessHandler">
            <beans:bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
                <beans:property name="defaultTargetUrl" value="/api/index" />
            </beans:bean>
        </beans:property>
        <beans:property name="authenticationFailureHandler">
            <beans:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <beans:property name="defaultFailureUrl" value="/api/password_Denied" />
            </beans:bean>
        </beans:property>
    </beans:bean>
    <!--可以用注解开发-->
    <beans:bean id="mySecurityFilter" class="com.wlt.security.MySecurityFilter">
        <!--获取当前用户名的关联信息，并交给authenticationManager对比用户的密码-->
        <!--<beans:property name="authenticationManager" ref="MyAuthenticationManager"/>-->
        <!--登入成功之后资源是否有权限访问鉴定-->
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManager"/>
    </beans:bean>
    <!-- 自定义的获取用户信息的实现类 -->
    <beans:bean id="myUserDetailService" class="com.wlt.security.MyUserDetailService"/>
    <!-- 系统运行时加载 系统要拦截的资源   与用户请求时要过滤的资源 -->
    <beans:bean id="mySecurityMetadataSource" class="com.wlt.security.MySecurityMetadataSource"/>
      <!--<beans:bean id="myAuthenticationFilter" class="com.wlt.security.MyAuthenticationFilter"/>-->
    <!-- 验证用户请求资源  是否拥有权限 -->
    <!-- 这里myAccessDecisionManagerBean是用来注入到AbstractSecurityInterceptor中accessDecisionManager属性的，
       用来实现权限控制的具体逻辑 -->
    <beans:bean id="myAccessDecisionManager" class="com.wlt.security.MyAccessDecisionManager"/>
</beans:beans>